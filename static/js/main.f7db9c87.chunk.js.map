{"version":3,"sources":["assets/salat.svg","component/Navbar.js","component/Sugestions.js","component/Search.jsx","component/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","navbar","text","className","Sugestions","fetchData","onClick","Search","updateInput","updateZipInput","onChange","event","target","value","type","placeholder","Card","data","settings","location","state","src","image","alt","height","width","results","Fajr","Duha","Dhuhr","Asr","Maghrib","Isha","App","useState","input","setInput","zipInput","setZipInput","setData","city","zip","a","axios","get","response","console","log","useEffect","Navbar","test","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7db9c87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/salat.0f830d53.svg\";","import React from 'react';\n\n const navbar = ({text}) => {\n\treturn (\n\t\t<div className=\"navbar\">{text}</div>\n\t\t)\n};\nexport default navbar;","import React from 'react';\n\nconst Sugestions = ({fetchData}) => {\n\n\treturn (\n\t\t<div className=\"sugestions\">\n\t\t<ul>\n\t\t\t<li onClick={()=>fetchData(\"dz\",\"16000\")}>Alger</li>\n\t\t\t<li onClick={()=>fetchData(\"dz\",\"15000\")}>Tizi Ouzou</li>\n\t\t\t<li onClick={()=>fetchData(\"dz\", \"09000\")}>Blida</li>\n\t\t\t<li onClick={()=>fetchData(\"fr\",\"75000\")}>Paris</li>\n\t\t\t<li onClick={()=>fetchData(\"ca\", \"H2H\")}>Montreal</li>\n\t\t</ul>\n\t\t</div>\n\t\t)\n}\n\n\nexport default Sugestions;","import React from 'react';\n\nconst Search = ({updateInput, fetchData, updateZipInput}) => {\n\treturn (\n\t\t<div className=\"search\">\n\t\t\t<input onChange={(event)=>{updateInput(event.target.value)}} type=\"text\" placeholder=\"dz, fr, us, ca\"/>\n\t\t\t<input onChange={(event) => {updateZipInput(event.target.value)}} type=\"text\" placeholder=\"enter your zipcode here\"/>\n\t\t\t<button onClick={()=>fetchData()} className=\"search-btn\">Search</button>\n\t\t</div>\n\t\t)\n}\n\n\nexport default Search ;\n","import React from 'react' \nimport image from '../assets/salat.svg'\n\nconst Card = ({data}) => {\n\treturn (\n\t\t<div className=\"card\">\n\t\t<div className=\"zone\">Salat time in {data.settings.location.state}</div>\n\t\t<img src={image} alt='salat' height=\"300\" width=\"300\"/>\n\t\t<div className=\"card-info\">\n\t\t<div className=\"fajr\">Fajr :{data.results.Fajr}</div>\n\t\t<div className=\"duha\">Duha :{data.results.Duha}</div>\n\t\t<div className=\"duhr\">Duhr :{data.results.Dhuhr}</div>\n\t\t<div className=\"asr\">Asr: {data.results.Asr}</div>\n\t\t<div className=\"maghreb\">Maghreb :{data.results.Maghrib}</div>\n\t\t<div className=\"isha\">Isha :{data.results.Isha}</div>\n\t\t</div>\n\t\t</div>\n\t\t)\n}\n\n\n\nexport default Card;","import React , {useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Navbar from './component/Navbar';\nimport Sugestions from './component/Sugestions';\nimport Search from './component/Search.jsx';\nimport Card from './component/Card'\n\nfunction App() {\n\nconst [input, setInput] = useState(\"\");\nconst [zipInput, setZipInput] = useState(\"\")\nconst [data, setData] = useState(null)\nconst updateInput = (text) => {\n  setInput(text);\n}\nconst updateZipInput = (text) => {\n  setZipInput(text);\n}\n\nconst fetchData = async (city, zip) => {\n// API Call \n  const endPoint = \"http://www.islamicfinder.us/index.php/api/prayer_times\"\n\n  try {\n    const response = await axios.get(`${endPoint}?country=${input? input: city}&zipcode=${zipInput? zipInput: zip}&time_format=0`)\n    console.log(response.data);\n    setData(response.data);\n    console.log(data)\n  }\n  catch (err) {\n    // enter error here \n  }\n}\n\nuseEffect(() => {\n  \n    fetchData(\"DZ\",\"16000\");\n  }\n, [])\n\n  return (\n    <div className=\"app\">\n    <Navbar text=\"Salat Timer\"/>\n    <div className=\"container\">\n    <Search fetchData={fetchData} updateInput={updateInput} updateZipInput={updateZipInput}/>\n    {data? <>\n        <Card data={data}/>\n      </>: <div>Enter your country and your zipcode</div>\n    }    \n\n    <Sugestions test='test' fetchData={fetchData}/>\n\n    </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}